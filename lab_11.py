from colours import colours
from headers import top as header_top, bottom as header_bottom

"""
The first value, before the first colon (:), represents the starting index.
The second value, between the first and second colons, represents the ending index (exclusive).
The third value, after the second colon (:), represents the step size, which determines the spacing between elements to include.
"""


# Problem 1
def add(a: int or float, b: int or float) -> int or float:
    """
    Adds a to b.
    :param a: int
    :param b: int
    :return: int
    """
    return a + b


# Problem 2
def iseven(a: int or float) -> bool:
    """
    Checks if a is even.
    :param a: int
    :return: bool
    """
    return a % 2 == 0


# Problem 3
def get_even(foo: list) -> list:
    """
    Gets even numbers from a list, without duplicates.
    :param foo: list
    :return: list
    """
    bar = [i for i in foo if i % 2 == 0]
    return list(set(bar))  # preservation is not a priority here


# Problem 4
def get_min_even(a: list, b: int) -> list:
    """
    Takes a list and given parameter and outputs a new list of numbers that are even and greater than b.
    :param a: list
    :param b: int
    :return: list
    """
    foo = [i for i in a if i % 2 == 0 and i > b]
    bar = []  # this is for removing duplicates...
    [bar.append(x) for x in foo if x not in bar]  # ...if you were to manually enter data. if generated by, say range(), then no need to remove duplicates
    return foo


# Problem 5
def word_count(a: str) -> int:
    """
    Counts the number of words in a string.
    :param a: str
    :return: int
    """
    return len(a.split(' '))


question = input('Which problem would you like to run?: ')
if question.isdigit():
    match question:
        case '1':
            print(f'{header_top(1)}{add(-1, 98)}\n{add(1, 6)}{header_bottom()}')
        case '2':
            print(f'{header_top(2)}{iseven(56)}\n{iseven(1)}\n{iseven(55)}{header_bottom()}')
        case '3':
            print(f'{header_top(3)}{get_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 12, 12, 1029, 109])}{header_bottom()}')
        case '4':
            print(f'{header_top(4)}{get_min_even(list(range(5, 101))[::5], 49)}{header_bottom()}')
        case '5':
            print(f'{header_top(5)}{word_count("hello world")}\n{word_count("hello world, this is a test")}\n'
                  f'{word_count("hello world, this is a test, and it is a long test")}{header_bottom()}')
        case _:  # default
            print(f'{colours.WARNING}Invalid problem number.')
